#include "utils.h" 
#include <cglm/vec3.h>
#include <stddef.h>

// float* verticesFromTriangles(Triangulation tri)
// {
//   float* vertices = malloc(sizeof(float)*tri.numTriangles*3*3);
//   int numVert = 0;
  
//   for (int i=0; i < tri.numTriangles; i++)
//   {
//     for (int j=0; j < 3; j++)
//     {
//       vertices[numVert++] = tri.triangles[i].v[j].x;
//       vertices[numVert++] = tri.triangles[i].v[j].y;
//       vertices[numVert++] = tri.triangles[i].v[j].z;
//       // printf("%d. x: %f, y: %f, z:%f\n", i, tri.triangles[i].v[j].x, tri.triangles[i].v[j].y, tri.triangles[i].v[j].z);
//     }
//     // puts("\n");
//   }
//   printf("Number of Triangles: %d\nNumber of Vertices: %d\n", tri.numTriangles, numVert);
//   return vertices;
// }

typedef VerticesList VerticesNormals;

float* flattenVerticesList(VerticesList* vl)
{
  unsigned int idx = 0;
  float* vertices = malloc(sizeof(float)*vl->numVerts*3);
  
  for (size_t i = 0; i < vl->numVerts; i++)
  {
    vertices[idx++] = vl->v[i].x;
    vertices[idx++] = vl->v[i].y;
    vertices[idx++] = vl->v[i].z;
    
  }
  return vertices;
}

vec3* generateNormals(VerticesList* vl, uintVec* idxVec)
{
  vec3* normals = malloc(sizeof(vec3)*(idxVec->numElems/3));
  unsigned int idx = 0; 
  
  for(size_t i=0; i < idxVec->numElems; i+=3)
  {
    vec3 v1 = {vl->v[idxVec->vals[i]].x,vl->v[idxVec->vals[i]].y, vl->v[idxVec->vals[i]].z};
    vec3 v2 = {vl->v[idxVec->vals[i+1]].x,vl->v[idxVec->vals[i+1]].y, vl->v[idxVec->vals[i+1]].z};
    vec3 v3 = {vl->v[idxVec->vals[i+2]].x,vl->v[idxVec->vals[i+2]].y, vl->v[idxVec->vals[i+2]].z};

    vec3 v12, v13;
    glm_vec3_sub(v2, v1, v12);
    glm_vec3_sub(v3, v1, v13);
     
    vec3 normal;
    glm_vec3_cross(v12, v13, normal); 
    glm_vec3_normalize(normal);
    glm_vec3_copy(normal, normals[idx]);

    idx++;
    // normals[idx++] = normal[0];
    // normals[idx++] = normal[1];
    // normals[idx++] = normal[2];
  }
  return normals;
}

vec3* averageNormals(vec3* normals, uintVec* idxVec)
{
  vec3* vertexNormals = malloc(sizeof(vec3)*idxVec->numElems);

  for (size_t i = 0; i < idxVec->numElems; i++)
    glm_vec3_zero(vertexNormals[i]);

  unsigned int idx = 0;
  for (size_t i = 0; i < idxVec->numElems; i+=3)
  {
    vec3 tmp;
    glm_vec3_add(vertexNormals[idxVec->vals[i]], normals[idx], tmp);
    glm_vec3_copy(tmp, vertexNormals[i]);
    glm_vec3_normalize(vertexNormals[i]);
    idx++;
  }
  return vertexNormals;  
}

float* flattenVec3(vec3* vec, unsigned int numElems)
{
  float* flattenVec = malloc(sizeof(float)*numElems*3);
  unsigned int idx = 0;
  
  for (size_t i = 0; i < numElems; i++)
  {
    flattenVec[idx++] = vec[i][0]; 
    flattenVec[idx++] = vec[i][1]; 
    flattenVec[idx++] = vec[i][2]; 
  }
  return flattenVec;
}

float* flattenAveragedNormals(VerticesList* vl, uintVec* idxVec)
{
  vec3* normals = generateNormals(vl, idxVec);
  vec3* averagedNormals = averageNormals(normals, idxVec);
  float* flattenAverNormals = flattenVec3(averagedNormals, idxVec->numElems);
  free(normals);
  free(averagedNormals);
  return flattenAverNormals;
}

// float* combineVerticesNormals(float* vertices, vec3* normals, unsigned int numElems)
// {
//   float* verticesNormals = malloc(sizeof(float)*numElems*2);
//   unsigned int idx = 0, vIdx = 0, nIdx = 0;
  
//   for(int i = 0; i < numElems; i+=6)
//   {
//     nIdx = i%18;
//     verticesNormals[i]   = vertices[vIdx++];
//     verticesNormals[i+1] = vertices[vIdx++];
//     verticesNormals[i+2] = vertices[vIdx++];
//     verticesNormals[i+4] = normals[nIdx][0];
//     verticesNormals[i+5] = normals[nIdx][1];
//     verticesNormals[i+6] = normals[nIdx][2];
//   }
//   return verticesNormals;
// }